{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/blade/Documents/projects/react/crwn-clothing/client/src/pages/checkout/checkout.component.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { CardElement, useStripe, useElements, Elements } from \"@stripe/react-stripe-js\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport CheckoutItem from \"../../components/checkout-item/checkout-item.component\";\nimport SubmitButton from \"../../components/payment-button/submit-button.styles\";\nimport BillingDetailsFields from \"./billing-credentials-fields\";\nimport { selectCartItems, selectCartTotal } from \"../../redux/cart/cart.selectors\";\nimport \"./checkout.styles.scss\";\n\nconst CheckoutPage = ({\n  cartItems,\n  total\n}) => {\n  _s();\n\n  const stripeTestPromise = loadStripe(process.env.STRIPE_PUBLISHABLE_KEY);\n  const isProcessing = true;\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState(\"\");\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const stripe = useStripe();\n  const elements = useElements();\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    window.fetch(\"/create-payment-intent\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        items: [{\n          id: \"xl-tshirt\"\n        }]\n      })\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      setClientSecret(data.clientSecret);\n    });\n  }, []);\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: \"Arial, sans-serif\",\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n\n  const handleChange = async event => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"checkout-page\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"double-column\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"checkout-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-block\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Product\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-block\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-block\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Quantity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-block\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Price\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-block\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), cartItems.map(cartItem => /*#__PURE__*/_jsxDEV(CheckoutItem, {\n          cartItem: cartItem\n        }, cartItem.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"total\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\" TOTAL $\", total]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"column\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"payment-column\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \" Payment \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(BillingDetailsFields, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SubmitButton, {\n            disabled: isProcessing || !stripe,\n            children: isProcessing ? \"Processing...\" : `Pay $${total}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Elements, {\n            stripe: stripeTestPromise,\n            children: /*#__PURE__*/_jsxDEV(\"form\", {\n              id: \"payment-form\",\n              onSubmit: handleSubmit,\n              children: [/*#__PURE__*/_jsxDEV(CardElement, {\n                id: \"card-element\",\n                options: cardStyle,\n                onChange: handleChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                disabled: processing || disabled || succeeded,\n                id: \"submit\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  id: \"button-text\",\n                  children: processing ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"spinner\",\n                    id: \"spinner\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 146,\n                    columnNumber: 23\n                  }, this) : \"Pay now\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 144,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 17\n              }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card-error\",\n                role: \"alert\",\n                children: error\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: succeeded ? \"result-message\" : \"result-message hidden\",\n                children: [\"Payment succeeded, see the result in your\", /*#__PURE__*/_jsxDEV(\"a\", {\n                  href: `https://dashboard.stripe.com/test/payments`,\n                  children: [\" \", \"Stripe dashboard.\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 165,\n                  columnNumber: 19\n                }, this), \" \", \"Refresh the page to pay again.\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CheckoutPage, \"Wd579yRKFCrXy4woT4czkDtxOrM=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = CheckoutPage;\nconst mapStateToProps = createStructuredSelector({\n  cartItems: selectCartItems,\n  total: selectCartTotal\n});\nexport default connect(mapStateToProps)(CheckoutPage);\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutPage\");","map":{"version":3,"sources":["/home/blade/Documents/projects/react/crwn-clothing/client/src/pages/checkout/checkout.component.jsx"],"names":["React","useState","useEffect","connect","createStructuredSelector","CardElement","useStripe","useElements","Elements","loadStripe","CheckoutItem","SubmitButton","BillingDetailsFields","selectCartItems","selectCartTotal","CheckoutPage","cartItems","total","stripeTestPromise","process","env","STRIPE_PUBLISHABLE_KEY","isProcessing","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","stripe","elements","window","fetch","method","headers","body","JSON","stringify","items","id","then","res","json","data","cardStyle","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","handleChange","event","empty","message","handleSubmit","ev","preventDefault","payload","confirmCardPayment","payment_method","card","getElement","map","cartItem","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\n\nimport {\n  CardElement,\n  useStripe,\n  useElements,\n  Elements,\n} from \"@stripe/react-stripe-js\";\nimport { loadStripe } from \"@stripe/stripe-js\";\n\nimport CheckoutItem from \"../../components/checkout-item/checkout-item.component\";\nimport SubmitButton from \"../../components/payment-button/submit-button.styles\";\nimport BillingDetailsFields from \"./billing-credentials-fields\";\n\nimport {\n  selectCartItems,\n  selectCartTotal,\n} from \"../../redux/cart/cart.selectors\";\n\nimport \"./checkout.styles.scss\";\n\nconst CheckoutPage = ({ cartItems, total }) => {\n  const stripeTestPromise = loadStripe(process.env.STRIPE_PUBLISHABLE_KEY);\n  const isProcessing = true;\n\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState(\"\");\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const stripe = useStripe();\n  const elements = useElements();\n\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    window\n      .fetch(\"/create-payment-intent\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ items: [{ id: \"xl-tshirt\" }] }),\n      })\n      .then((res) => {\n        return res.json();\n      })\n      .then((data) => {\n        setClientSecret(data.clientSecret);\n      });\n  }, []);\n\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: \"Arial, sans-serif\",\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\",\n        },\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\",\n      },\n    },\n  };\n\n  const handleChange = async (event) => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n  const handleSubmit = async (ev) => {\n    ev.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n      },\n    });\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n    }\n  };\n\n  return (\n    <div class=\"checkout-page\">\n      <div class=\"row\">\n        <div className=\"double-column\">\n          <div className=\"checkout-header\">\n            <div className=\"header-block\">\n              <span>Product</span>\n            </div>\n            <div className=\"header-block\">\n              <span>Description</span>\n            </div>\n            <div className=\"header-block\">\n              <span>Quantity</span>\n            </div>\n            <div className=\"header-block\">\n              <span>Price</span>\n            </div>\n            <div className=\"header-block\">\n              <span>Remove</span>\n            </div>\n          </div>\n\n          {cartItems.map((cartItem) => (\n            <CheckoutItem key={cartItem.id} cartItem={cartItem}></CheckoutItem>\n          ))}\n          <div className=\"total\">\n            <span> TOTAL ${total}</span>\n          </div>\n        </div>\n        <div class=\"column\">\n          <div class=\"payment-column\">\n            <h1> Payment </h1>\n            <BillingDetailsFields />\n            <br></br>\n            <SubmitButton disabled={isProcessing || !stripe}>\n              {isProcessing ? \"Processing...\" : `Pay $${total}`}\n            </SubmitButton>\n            <Elements stripe={stripeTestPromise}>\n              <form id=\"payment-form\" onSubmit={handleSubmit}>\n                <CardElement\n                  id=\"card-element\"\n                  options={cardStyle}\n                  onChange={handleChange}\n                />\n                <button\n                  disabled={processing || disabled || succeeded}\n                  id=\"submit\"\n                >\n                  <span id=\"button-text\">\n                    {processing ? (\n                      <div className=\"spinner\" id=\"spinner\"></div>\n                    ) : (\n                      \"Pay now\"\n                    )}\n                  </span>\n                </button>\n                {/* Show any error that happens when processing the payment */}\n                {error && (\n                  <div className=\"card-error\" role=\"alert\">\n                    {error}\n                  </div>\n                )}\n                {/* Show a success message upon completion */}\n                <p\n                  className={\n                    succeeded ? \"result-message\" : \"result-message hidden\"\n                  }\n                >\n                  Payment succeeded, see the result in your\n                  <a href={`https://dashboard.stripe.com/test/payments`}>\n                    {\" \"}\n                    Stripe dashboard.\n                  </a>{\" \"}\n                  Refresh the page to pay again.\n                </p>\n              </form>\n            </Elements>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = createStructuredSelector({\n  cartItems: selectCartItems,\n  total: selectCartTotal,\n});\n\nexport default connect(mapStateToProps)(CheckoutPage);\n"]},"metadata":{},"sourceType":"module"}