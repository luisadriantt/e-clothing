{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/blade/Documents/projects/react/crwn-clothing/client/src/pages/checkout/checkout.component.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n\nconst CheckoutForm = ({\n  cartItems,\n  total\n}) => {\n  _s();\n\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState(\"\");\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const stripe = useStripe();\n  const elements = useElements();\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    const priceForStripe = total * 100;\n\n    const onToken = token => {\n      axios({\n        url: \"payment\",\n        method: \"post\",\n        data: {\n          amount: priceForStripe,\n          token\n        }\n      }).then(response => {\n        alert(\"Payment successful\");\n      }).catch(error => {\n        console.log(\"payment error: \", error);\n        alert(\"There was an error\");\n      });\n    };\n\n    window.fetch(\"/create-payment-intent\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        items: [{\n          id: \"xl-tshirt\"\n        }]\n      })\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      setClientSecret(data.clientSecret);\n    });\n  }, []);\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: \"Arial, sans-serif\",\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n\n  const handleChange = async event => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(CardElement, {\n      id: \"card-element\",\n      options: cardStyle,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: processing || disabled || succeeded,\n      id: \"submit\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"button-text\",\n        children: processing ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\",\n          id: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this) : \"Pay now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-error\",\n      role: \"alert\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: succeeded ? \"result-message\" : \"result-message hidden\",\n      children: [\"Payment succeeded, see the result in your\", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `https://dashboard.stripe.com/test/payments`,\n        children: [\" \", \"Stripe dashboard.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), \" \", \"Refresh the page to pay again.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CheckoutForm, \"Wd579yRKFCrXy4woT4czkDtxOrM=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = CheckoutForm;\nexport default CheckoutForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"sources":["/home/blade/Documents/projects/react/crwn-clothing/client/src/pages/checkout/checkout.component.jsx"],"names":["React","useState","useEffect","axios","connect","createStructuredSelector","CardElement","useStripe","useElements","CheckoutForm","cartItems","total","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","stripe","elements","priceForStripe","onToken","token","url","method","data","amount","then","response","alert","catch","console","log","window","fetch","headers","body","JSON","stringify","items","id","res","json","cardStyle","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","handleChange","event","empty","message","handleSubmit","ev","preventDefault","payload","confirmCardPayment","payment_method","card","getElement"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AAEA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,WAAjC,QAAoD,yBAApD;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAA0B;AAAA;;AAC7C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACe,UAAD,EAAaC,aAAb,IAA8BhB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACiB,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACmB,YAAD,EAAeC,eAAf,IAAkCpB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAMqB,MAAM,GAAGf,SAAS,EAAxB;AACA,QAAMgB,QAAQ,GAAGf,WAAW,EAA5B;AACAN,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMsB,cAAc,GAAGb,KAAK,GAAG,GAA/B;;AACA,UAAMc,OAAO,GAAIC,KAAD,IAAW;AACzBvB,MAAAA,KAAK,CAAC;AACJwB,QAAAA,GAAG,EAAE,SADD;AAEJC,QAAAA,MAAM,EAAE,MAFJ;AAGJC,QAAAA,IAAI,EAAE;AACJC,UAAAA,MAAM,EAAEN,cADJ;AAEJE,UAAAA;AAFI;AAHF,OAAD,CAAL,CAQGK,IARH,CAQSC,QAAD,IAAc;AAClBC,QAAAA,KAAK,CAAC,oBAAD,CAAL;AACD,OAVH,EAWGC,KAXH,CAWUpB,KAAD,IAAW;AAChBqB,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BtB,KAA/B;AACAmB,QAAAA,KAAK,CAAC,oBAAD,CAAL;AACD,OAdH;AAeD,KAhBD;;AAiBAI,IAAAA,MAAM,CACHC,KADH,CACS,wBADT,EACmC;AAC/BV,MAAAA,MAAM,EAAE,MADuB;AAE/BW,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFsB;AAK/BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,QAAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAAD;AAAT,OAAf;AALyB,KADnC,EAQGb,IARH,CAQSc,GAAD,IAAS;AACb,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,KAVH,EAWGf,IAXH,CAWSF,IAAD,IAAU;AACdR,MAAAA,eAAe,CAACQ,IAAI,CAACT,YAAN,CAAf;AACD,KAbH;AAcD,GAlCQ,EAkCN,EAlCM,CAAT;AAmCA,QAAM2B,SAAS,GAAG;AAChBC,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAE;AACJC,QAAAA,KAAK,EAAE,SADH;AAEJC,QAAAA,UAAU,EAAE,mBAFR;AAGJC,QAAAA,aAAa,EAAE,aAHX;AAIJC,QAAAA,QAAQ,EAAE,MAJN;AAKJ,yBAAiB;AACfH,UAAAA,KAAK,EAAE;AADQ;AALb,OADD;AAULI,MAAAA,OAAO,EAAE;AACPJ,QAAAA,KAAK,EAAE,SADA;AAEPK,QAAAA,SAAS,EAAE;AAFJ;AAVJ;AADS,GAAlB;;AAiBA,QAAMC,YAAY,GAAG,MAAOC,KAAP,IAAiB;AACpC;AACA;AACAtC,IAAAA,WAAW,CAACsC,KAAK,CAACC,KAAP,CAAX;AACA3C,IAAAA,QAAQ,CAAC0C,KAAK,CAAC3C,KAAN,GAAc2C,KAAK,CAAC3C,KAAN,CAAY6C,OAA1B,GAAoC,EAArC,CAAR;AACD,GALD;;AAMA,QAAMC,YAAY,GAAG,MAAOC,EAAP,IAAc;AACjCA,IAAAA,EAAE,CAACC,cAAH;AACA7C,IAAAA,aAAa,CAAC,IAAD,CAAb;AACA,UAAM8C,OAAO,GAAG,MAAMzC,MAAM,CAAC0C,kBAAP,CAA0B5C,YAA1B,EAAwC;AAC5D6C,MAAAA,cAAc,EAAE;AACdC,QAAAA,IAAI,EAAE3C,QAAQ,CAAC4C,UAAT,CAAoB7D,WAApB;AADQ;AAD4C,KAAxC,CAAtB;;AAKA,QAAIyD,OAAO,CAACjD,KAAZ,EAAmB;AACjBC,MAAAA,QAAQ,CAAE,kBAAiBgD,OAAO,CAACjD,KAAR,CAAc6C,OAAQ,EAAzC,CAAR;AACA1C,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD,KAHD,MAGO;AACLF,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAJ,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;AACF,GAhBD;;AAiBA,sBACE;AAAM,IAAA,EAAE,EAAC,cAAT;AAAwB,IAAA,QAAQ,EAAE+C,YAAlC;AAAA,4BACE,QAAC,WAAD;AACE,MAAA,EAAE,EAAC,cADL;AAEE,MAAA,OAAO,EAAEb,SAFX;AAGE,MAAA,QAAQ,EAAES;AAHZ;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAQ,MAAA,QAAQ,EAAExC,UAAU,IAAIE,QAAd,IAA0BN,SAA5C;AAAuD,MAAA,EAAE,EAAC,QAA1D;AAAA,6BACE;AAAM,QAAA,EAAE,EAAC,aAAT;AAAA,kBACGI,UAAU,gBACT;AAAK,UAAA,SAAS,EAAC,SAAf;AAAyB,UAAA,EAAE,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA,gBADS,GAGT;AAJJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YANF,EAgBGF,KAAK,iBACJ;AAAK,MAAA,SAAS,EAAC,YAAf;AAA4B,MAAA,IAAI,EAAC,OAAjC;AAAA,gBACGA;AADH;AAAA;AAAA;AAAA;AAAA,YAjBJ,eAsBE;AAAG,MAAA,SAAS,EAAEF,SAAS,GAAG,gBAAH,GAAsB,uBAA7C;AAAA,2EAEE;AAAG,QAAA,IAAI,EAAG,4CAAV;AAAA,mBACG,GADH;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,EAKO,GALP;AAAA;AAAA;AAAA;AAAA;AAAA,YAtBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiCD,CApHD;;GAAMH,Y;UAMWF,S,EACEC,W;;;KAPbC,Y;AAsHN,eAAeA,YAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport axios from \"axios\";\n\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\n\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n\nconst CheckoutForm = ({ cartItems, total }) => {\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState(\"\");\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const stripe = useStripe();\n  const elements = useElements();\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    const priceForStripe = total * 100;\n    const onToken = (token) => {\n      axios({\n        url: \"payment\",\n        method: \"post\",\n        data: {\n          amount: priceForStripe,\n          token,\n        },\n      })\n        .then((response) => {\n          alert(\"Payment successful\");\n        })\n        .catch((error) => {\n          console.log(\"payment error: \", error);\n          alert(\"There was an error\");\n        });\n    };\n    window\n      .fetch(\"/create-payment-intent\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ items: [{ id: \"xl-tshirt\" }] }),\n      })\n      .then((res) => {\n        return res.json();\n      })\n      .then((data) => {\n        setClientSecret(data.clientSecret);\n      });\n  }, []);\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: \"Arial, sans-serif\",\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\",\n        },\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\",\n      },\n    },\n  };\n  const handleChange = async (event) => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n  const handleSubmit = async (ev) => {\n    ev.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n      },\n    });\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n    }\n  };\n  return (\n    <form id=\"payment-form\" onSubmit={handleSubmit}>\n      <CardElement\n        id=\"card-element\"\n        options={cardStyle}\n        onChange={handleChange}\n      />\n      <button disabled={processing || disabled || succeeded} id=\"submit\">\n        <span id=\"button-text\">\n          {processing ? (\n            <div className=\"spinner\" id=\"spinner\"></div>\n          ) : (\n            \"Pay now\"\n          )}\n        </span>\n      </button>\n      {/* Show any error that happens when processing the payment */}\n      {error && (\n        <div className=\"card-error\" role=\"alert\">\n          {error}\n        </div>\n      )}\n      {/* Show a success message upon completion */}\n      <p className={succeeded ? \"result-message\" : \"result-message hidden\"}>\n        Payment succeeded, see the result in your\n        <a href={`https://dashboard.stripe.com/test/payments`}>\n          {\" \"}\n          Stripe dashboard.\n        </a>{\" \"}\n        Refresh the page to pay again.\n      </p>\n    </form>\n  );\n};\n\nexport default CheckoutForm;\n"]},"metadata":{},"sourceType":"module"}