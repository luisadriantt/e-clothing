{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyAaacpNCzW7N5cDTkanr3ewnBRT8amJK6A\",\n  authDomain: \"crwn-db-ea388.firebaseapp.com\",\n  projectId: \"crwn-db-ea388\",\n  storageBucket: \"crwn-db-ea388.appspot.com\",\n  messagingSenderId: \"454201003096\",\n  appId: \"1:454201003096:web:d6cb9f9095a42de947ce2d\",\n  measurementId: \"G-PKTNLQ931C\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; // Query to db returns a reference object that represents the current place in the db\n  // Does'nt have the data, gives info about id or path to reference\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`); // .get() returns an snapShot object to retrieve the actual data from the refence\n\n  const snapShot = await userRef.get(); // If the snapShot is null, store usere into firebase\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey); // group all calls into one request\n\n  const batch = firestore.batch(); // use forEach instead of map because dont return a new array like map\n\n  objectsToAdd.forEach(obj => {\n    const newDocFerf = collectionRef.doc(); // returns a new id gernerated by firebase\n\n    batch.set(newDocFerf, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collectionsSnapshot => {\n  // \".docs\" will return the querysnapshot array!!!!\n  const transformedCollection = collectionsSnapshot.docs.map(doc => {\n    // querysnapshot data\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  /* \n  Returns a map of the collection using\n  the reduce function where the -key- is\n  the collection title in lower case and\n  the -value- is the collection of that\n  item\n  */\n\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  promt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/home/blade/Documents/projects/react/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","initializeApp","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocFerf","commit","convertCollectionsSnapshotToMap","collectionsSnapshot","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","auth","googleProvider","GoogleAuthProvider","setCustomParameters","promt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nconst config = {\n  apiKey: \"AIzaSyAaacpNCzW7N5cDTkanr3ewnBRT8amJK6A\",\n  authDomain: \"crwn-db-ea388.firebaseapp.com\",\n  projectId: \"crwn-db-ea388\",\n  storageBucket: \"crwn-db-ea388.appspot.com\",\n  messagingSenderId: \"454201003096\",\n  appId: \"1:454201003096:web:d6cb9f9095a42de947ce2d\",\n  measurementId: \"G-PKTNLQ931C\",\n};\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  // Query to db returns a reference object that represents the current place in the db\n  // Does'nt have the data, gives info about id or path to reference\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n  // .get() returns an snapShot object to retrieve the actual data from the refence\n  const snapShot = await userRef.get();\n\n  // If the snapShot is null, store usere into firebase\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\n\nfirebase.initializeApp(config);\n\nexport const addCollectionAndDocuments = async (\n  collectionKey,\n  objectsToAdd\n) => {\n  const collectionRef = firestore.collection(collectionKey);\n\n  // group all calls into one request\n  const batch = firestore.batch();\n  // use forEach instead of map because dont return a new array like map\n  objectsToAdd.forEach((obj) => {\n    const newDocFerf = collectionRef.doc(); // returns a new id gernerated by firebase\n    batch.set(newDocFerf, obj);\n  });\n\n  return await batch.commit();\n};\n\nexport const convertCollectionsSnapshotToMap = (collectionsSnapshot) => {\n  // \".docs\" will return the querysnapshot array!!!!\n  const transformedCollection = collectionsSnapshot.docs.map((doc) => {\n    // querysnapshot data\n    const { title, items } = doc.data();\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items,\n    };\n  });\n\n  /* \n  Returns a map of the collection using\n  the reduce function where the -key- is\n  the collection title in lower case and\n  the -value- is the collection of that\n  item\n  */\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ promt: \"select_account\" });\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}